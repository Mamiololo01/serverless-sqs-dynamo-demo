AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Builds serverless API with Lambda functions,
  API Gateway, SQS Queues, DynamoDB table, and an S3 bucket.
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        TABLE_NAME: !Ref IotDemoTable
        SQS_QUEUE_URL: !Ref IotDemoQueue
Parameters:
  IotBucketName:
    Type: String
    Default: gstafford-iot-data
  DomainName:
    Type: String
    Default: api.example-api.com
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:931066906971:certificate/57fd98d2-a4ee-410a-9d5c-a755192f0fe6
  HostedZoneName:
    Type: String
    Default: example-api.com. # don't miss the dot at the end
Resources:
  IotServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateArn
    DependsOn: IotServerlessApi
  GetMessagesFunction:
    Type: AWS::Serverless::Function
    Description: Get all IoT messages in DynamoDB table (scan)
    Properties:
      Description: Get all IoT messages in DynamoDB table (scan)
      CodeUri: iot_api_to_dynamodb/
      Handler: app.getMessages
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        getMessages:
          Type: Api
          Properties:
            Path: /message
            Method: get
            RestApiId: !Ref IotServerlessApi
  GetMessageFunction:
    Type: AWS::Serverless::Function
    Description: Get one IoT message based on timestamp and location
    Properties:
      Description: Get one IoT message based on timestamp and location
      CodeUri: iot_api_to_dynamodb/
      Handler: app.getMessage
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        getMessages:
          Type: Api
          Properties:
            Path: /message/{date}
            Method: get
            RestApiId: !Ref IotServerlessApi
  PostMessageFunction:
    Type: AWS::Serverless::Function
    Description: Create new IoT message item in DynamoDB table
    Properties:
      Description: Create new IoT message item in DynamoDB table
      CodeUri: iot_api_to_dynamodb/
      Handler: app.postMessage
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        postMessage:
          Type: Api
          Properties:
            Path: /message
            Method: post
            RestApiId: !Ref IotServerlessApi
  PutMessageFunction:
    Type: AWS::Serverless::Function
    Description: Update IoT message item in DynamoDB table
    Properties:
      Description: Update IoT message item in DynamoDB table
      CodeUri: iot_api_to_dynamodb/
      Handler: app.putMessage
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        putMessage:
          Type: Api
          Properties:
            Path: /message/{date}
            Method: put
            RestApiId: !Ref IotServerlessApi
  DeleteMessageFunction:
    Type: AWS::Serverless::Function
    Description: Delete IoT message item in DynamoDB table
    Properties:
      Description: Delete IoT message item in DynamoDB table
      CodeUri: iot_api_to_dynamodb/
      Handler: app.deleteMessage
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        deleteMessage:
          Type: Api
          Properties:
            Path: /message/{date}
            Method: delete
            RestApiId: !Ref IotServerlessApi
  SqsToDynamoDbFunction:
    Type: AWS::Serverless::Function
    Description: Responds to SQS Event - Sends to Dynamodb
    Properties:
      Description: Post new IoT message to SQS
      CodeUri: iot_sqs_to_dynamodb/
      Handler: app.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        SqsToDynamoDb:
          Type: SQS
          Properties:
            Queue: !GetAtt IotDemoQueue.Arn
            BatchSize: 10
            Enabled: true
  IotDataBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - S3ToSQSFunctionPermission
    Properties:
      BucketName: !Ref IotBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt S3ToSQSFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .csv
  S3ToSQSFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref S3ToSQSFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${IotBucketName}'
      SourceAccount: !Ref AWS::AccountId
  S3ToSQSFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: getObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${IotBucketName}/*'
        - PolicyName: produceToQueue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt IotDemoQueue.Arn
  S3ToSQSFunction:
    Type: AWS::Serverless::Function
    Description: Respond to S3 Events
    Properties:
      Description: Responds to S3 Event - Sends to SQS
      CodeUri: iot_s3_to_sqs/
      Handler: app.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Role: !GetAtt S3ToSQSFunctionExecutionRole.Arn
  IotDemoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: date
          AttributeType: S
        - AttributeName: time
          AttributeType: S
      KeySchema:
        - AttributeName: date
          KeyType: HASH
        - AttributeName: time
          KeyType: RANGE
  IotDemoQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "DeadLetterQueue"
            - "Arn"
        maxReceiveCount: 5
  DeadLetterQueue:
    Type: AWS::SQS::Queue
  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref IotServerlessApi
      Stage: Prod
    DependsOn: IotServerlessApiProdStage # logical id of API GW stage created by SAM
  APIDomain:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneName
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt ApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for CloudFront aliases
Outputs:
  MyStacksRegion:
    Description: 'Region stack is located in'
    Value: !Ref AWS::Region
  IotBucketName:
    Description: 'Name of S3 Bucket where CSV files are uploaded'
    Value: !Ref IotBucketName
  IotDemoTable:
    Description: 'Name of DynamoDB table'
    Value: !Ref IotDemoTable
  IotDemoQueueArn:
    Description: 'Arn of SQS Queue'
    Value: !GetAtt IotDemoQueue.Arn
  IotDemoQueueUrl:
    Description: 'URL of SQS Queue'
    Value: !Ref IotDemoQueue
  GetMessagesApi:
    Description: 'Example API Gateway endpoint: GetMessagesFunction'
    Value: !Sub "https://${IotServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getMessages/"
