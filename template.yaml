AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Builds serverless API with Lambda functions,
  API Gateway, SQS Queue, DynamoDB table, and S3 bucket.
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        TABLE_NAME: !Ref IotDemoTable
        QUEUE_URL: !Ref IotDemoQueue
Parameters:
  IotBucketName:
    Type: String
    Default: gstafford-iot-data
Resources:
  GetMessagesFunction:
    Type: AWS::Serverless::Function
    Description: Get all IoT messages in DynamoDB table (scan)
    Properties:
      Description: Get all IoT messages in DynamoDB table (scan)
      CodeUri: iot_dynamodb_messages/
      Handler: app.getMessages
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        getMessages:
          Type: Api
          Properties:
            Path: /message
            Method: get
  GetMessageFunction:
    Type: AWS::Serverless::Function
    Description: Get one IoT message based on timestamp and location
    Properties:
      Description: Get one IoT message based on timestamp and location
      CodeUri: iot_dynamodb_messages/
      Handler: app.getMessage
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        getMessages:
          Type: Api
          Properties:
            Path: /message/{date}
            Method: get
  PostMessageFunction:
    Type: AWS::Serverless::Function
    Description: Create new IoT message item in DynamoDB table
    Properties:
      Description: Create new IoT message item in DynamoDB table
      CodeUri: iot_dynamodb_messages/
      Handler: app.postMessage
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        postMessage:
          Type: Api
          Properties:
            Path: /message
            Method: post
  PutMessageFunction:
    Type: AWS::Serverless::Function
    Description: Modify IoT message item in DynamoDB table
    Properties:
      Description: Modify new IoT message item in DynamoDB table
      CodeUri: iot_dynamodb_messages/
      Handler: app.putMessage
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        putMessage:
          Type: Api
          Properties:
            Path: /message
            Method: put
  SqsToDynamoDbFunction:
    Type: AWS::Serverless::Function
    Description: Post new IoT message to SQS
    Properties:
      Description: Post new IoT message to SQS
      CodeUri: iot_sqs_to_dynamodb/
      Handler: app.lambda_handler
      Runtime: python3.7
      MemorySize: 256
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IotDemoTable
      Events:
        SqsToDynamoDb:
          Type: SQS
          Properties:
            Queue: !GetAtt IotDemoQueue.Arn
            BatchSize: 10
            Enabled: true
  IotDataBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - S3ToSQSFunctionPermission
    Properties:
      BucketName: !Ref IotBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt S3ToSQSFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .csv
  S3ToSQSFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref S3ToSQSFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${IotBucketName}'
      SourceAccount: !Ref AWS::AccountId
  S3ToSQSFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: getObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${IotBucketName}/*'
        - PolicyName: produceToQueue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt IotDemoQueue.Arn
  S3ToSQSFunction:
    Type: AWS::Serverless::Function
    Description: Respond to S3 Events
    Properties:
      Description: Post new IoT message to SQS
      CodeUri: iot_s3_to_sqs_v2/
      Handler: app.lambda_handler
      Runtime: python3.7
      MemorySize: 256
      Role: !GetAtt S3ToSQSFunctionExecutionRole.Arn
  IotDemoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: date
          AttributeType: S
        - AttributeName: time
          AttributeType: S
      KeySchema:
        - AttributeName: date
          KeyType: HASH
        - AttributeName: time
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  IotDemoQueue:
    Type: AWS::SQS::Queue
Outputs:
  GetMessagesApi:
    Description: "API Gateway endpoint URL for Prod Stage for GetMessagesFunction"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getMessages/"
  IotDemoQueueUrl:
    Description: "URL of SQS Queue"
    Value: !Ref IotDemoQueue

