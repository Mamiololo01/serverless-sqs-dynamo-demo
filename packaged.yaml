AWSTemplateFormatVersion: '2010-09-09'
Description: 'Builds serverless API with Lambda functions, API Gateway, SQS Queue,
  DynamoDB table, and S3 bucket.

  '
Globals:
  Function:
    Environment:
      Variables:
        QUEUE_URL:
          Ref: IotDemoQueue
        TABLE_NAME:
          Ref: IotDemoTable
    Timeout: 3
Outputs:
  GetMessagesApi:
    Description: API Gateway endpoint URL for Prod Stage for GetMessagesFunction
    Value:
      Fn::Sub: https://${IotServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getMessages/
  IotDemoQueueArn:
    Description: Arn of SQS Queue
    Value:
      Fn::GetAtt:
      - IotDemoQueue
      - Arn
  IotDemoQueueUrl:
    Description: URL of SQS Queue
    Value:
      Ref: IotDemoQueue
  IotDemoTable:
    Description: Name of DynamoDB Table
    Value:
      Ref: IotDemoTable
Parameters:
  CertificateArn:
    Default: arn:aws:acm:us-east-1:931066906971:certificate/57fd98d2-a4ee-410a-9d5c-a755192f0fe6
    Type: String
  DomainName:
    Default: api.example-api.com
    Type: String
  HostedZoneName:
    Default: example-api.com.
    Type: String
  IotBucketName:
    Default: gstafford-iot-data
    Type: String
Resources:
  APIDomain:
    Properties:
      HostedZoneName:
        Ref: HostedZoneName
      RecordSets:
      - AliasTarget:
          DNSName:
            Fn::GetAtt:
            - ApiDomainName
            - DistributionDomainName
          HostedZoneId: Z2FDTNDATAQYW2
        Name:
          Ref: DomainName
        Type: A
    Type: AWS::Route53::RecordSetGroup
  ApiDomainName:
    DependsOn: IotServerlessApi
    Properties:
      CertificateArn:
        Ref: CertificateArn
      DomainName:
        Ref: DomainName
    Type: AWS::ApiGateway::DomainName
  ApiMapping:
    DependsOn: IotServerlessApiProdStage
    Properties:
      DomainName:
        Ref: DomainName
      RestApiId:
        Ref: IotServerlessApi
      Stage: Prod
    Type: AWS::ApiGateway::BasePathMapping
  DeleteMessageFunction:
    Description: Delete IoT message item in DynamoDB table
    Properties:
      CodeUri: s3://gstafford-sam-demo/4bae2d6754bab4e74fecda3aa1818432
      Description: Delete IoT message item in DynamoDB table
      Events:
        deleteMessage:
          Properties:
            Method: delete
            Path: /message/{date}
            RestApiId:
              Ref: IotServerlessApi
          Type: Api
      Handler: app.deleteMessage
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  GetMessageFunction:
    Description: Get one IoT message based on timestamp and location
    Properties:
      CodeUri: s3://gstafford-sam-demo/4bae2d6754bab4e74fecda3aa1818432
      Description: Get one IoT message based on timestamp and location
      Events:
        getMessages:
          Properties:
            Method: get
            Path: /message/{date}
            RestApiId:
              Ref: IotServerlessApi
          Type: Api
      Handler: app.getMessage
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  GetMessagesFunction:
    Description: Get all IoT messages in DynamoDB table (scan)
    Properties:
      CodeUri: s3://gstafford-sam-demo/4bae2d6754bab4e74fecda3aa1818432
      Description: Get all IoT messages in DynamoDB table (scan)
      Events:
        getMessages:
          Properties:
            Method: get
            Path: /message
            RestApiId:
              Ref: IotServerlessApi
          Type: Api
      Handler: app.getMessages
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  IotDataBucket:
    DependsOn:
    - S3ToSQSFunctionPermission
    Properties:
      BucketName:
        Ref: IotBucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Filter:
            S3Key:
              Rules:
              - Name: suffix
                Value: .csv
          Function:
            Fn::GetAtt:
            - S3ToSQSFunction
            - Arn
    Type: AWS::S3::Bucket
  IotDemoQueue:
    Type: AWS::SQS::Queue
  IotDemoTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: date
        AttributeType: S
      - AttributeName: time
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: date
        KeyType: HASH
      - AttributeName: time
        KeyType: RANGE
    Type: AWS::DynamoDB::Table
  IotServerlessApi:
    Properties:
      Auth:
        DefaultAuthorizer: NONE
      StageName: Prod
    Type: AWS::Serverless::Api
  PostMessageFunction:
    Description: Create new IoT message item in DynamoDB table
    Properties:
      CodeUri: s3://gstafford-sam-demo/4bae2d6754bab4e74fecda3aa1818432
      Description: Create new IoT message item in DynamoDB table
      Events:
        postMessage:
          Properties:
            Method: post
            Path: /message
            RestApiId:
              Ref: IotServerlessApi
          Type: Api
      Handler: app.postMessage
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  PutMessageFunction:
    Description: Update IoT message item in DynamoDB table
    Properties:
      CodeUri: s3://gstafford-sam-demo/4bae2d6754bab4e74fecda3aa1818432
      Description: Update IoT message item in DynamoDB table
      Events:
        putMessage:
          Properties:
            Method: put
            Path: /message/{date}
            RestApiId:
              Ref: IotServerlessApi
          Type: Api
      Handler: app.putMessage
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  S3ToSQSFunction:
    Description: Respond to S3 Events
    Properties:
      CodeUri: s3://gstafford-sam-demo/4c348ce4989de30099e414f27a1ee64b
      Description: Responds to S3 Event - Sends to SQS
      Handler: app.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - S3ToSQSFunctionExecutionRole
        - Arn
      Runtime: python3.7
    Type: AWS::Serverless::Function
  S3ToSQSFunctionExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:*
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: '2012-10-17'
        PolicyName: allowLogging
      - PolicyDocument:
          Statement:
          - Action:
            - s3:GetObject
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:s3:::${IotBucketName}/*
          Version: '2012-10-17'
        PolicyName: getObjects
      - PolicyDocument:
          Statement:
          - Action:
            - sqs:SendMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - IotDemoQueue
              - Arn
          Version: '2012-10-17'
        PolicyName: produceToQueue
    Type: AWS::IAM::Role
  S3ToSQSFunctionPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: S3ToSQSFunction
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:s3:::${IotBucketName}
    Type: AWS::Lambda::Permission
  SqsToDynamoDbFunction:
    Description: Responds to SQS Event - Sends to Dynamodb
    Properties:
      CodeUri: s3://gstafford-sam-demo/0f6ee961de7ae658ae47312d580ff706
      Description: Post new IoT message to SQS
      Events:
        SqsToDynamoDb:
          Properties:
            BatchSize: 10
            Enabled: true
            Queue:
              Fn::GetAtt:
              - IotDemoQueue
              - Arn
          Type: SQS
      Handler: app.lambda_handler
      MemorySize: 128
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Runtime: python3.7
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
