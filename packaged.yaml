AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Builds serverless API with Lambda functions, API Gateway, SQS Queue,
  and DynamoDB table.

  '
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        TABLE_NAME:
          Ref: IotDemoTable
        QUEUE_URL:
          Ref: IotDemoQueue
Resources:
  GetMessagesFunction:
    Type: AWS::Serverless::Function
    Description: Get all IoT messages in DynamoDB table (scan)
    Properties:
      Description: Get all IoT messages in DynamoDB table (scan)
      CodeUri: s3://gstafford-sam-demo/7cc0d45cc8d1333a3cb8e2bcfc73efc2
      Handler: app.getMessages
      Runtime: nodejs10.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Events:
        getMessages:
          Type: Api
          Properties:
            Path: /message
            Method: get
  GetMessageFunction:
    Type: AWS::Serverless::Function
    Description: Get one IoT message based on timestamp and location
    Properties:
      Description: Get one IoT message based on timestamp and location
      CodeUri: s3://gstafford-sam-demo/7cc0d45cc8d1333a3cb8e2bcfc73efc2
      Handler: app.getMessage
      Runtime: nodejs10.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Events:
        getMessages:
          Type: Api
          Properties:
            Path: /message/{date}
            Method: get
  PostMessageFunction:
    Type: AWS::Serverless::Function
    Description: Create new IoT message item in DynamoDB table
    Properties:
      Description: Create new IoT message item in DynamoDB table
      CodeUri: s3://gstafford-sam-demo/7cc0d45cc8d1333a3cb8e2bcfc73efc2
      Handler: app.postMessage
      Runtime: nodejs10.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Events:
        postMessage:
          Type: Api
          Properties:
            Path: /message
            Method: post
  SqsToDynamoDbFunction:
    Type: AWS::Serverless::Function
    Description: Post new IoT message to SQS
    Properties:
      Description: Post new IoT message to SQS
      CodeUri: s3://gstafford-sam-demo/2a7d16c4ebeb6c38f80e4e7d4671bd36
      Handler: app.lambda_handler
      Runtime: python3.7
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IotDemoTable
      Events:
        SqsToDynamoDb:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - IotDemoQueue
              - Arn
            BatchSize: 10
            Enabled: true
  IotDemoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: date
        AttributeType: S
      - AttributeName: time
        AttributeType: S
      KeySchema:
      - AttributeName: date
        KeyType: HASH
      - AttributeName: time
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  IotDemoQueue:
    Type: AWS::SQS::Queue
Outputs:
  GetMessagesApi:
    Description: API Gateway endpoint URL for Prod Stage for GetMessagesFunction
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getMessages/
  IotDemoQueueUrl:
    Description: URL of SQS Queue
    Value:
      Ref: IotDemoQueue
